# Exarch Scripts General Settings Configuration
# Default values and system-wide settings

# Runtime versions
DEFAULT_NODE_VERSION="lts"
DEFAULT_DOTNET_VERSION="9"
EXTRA_DOTNET_VERSIONS=("8")

# Directory paths
DEFAULT_HYPR_SOURCE_DIR="./dotfiles/hypr"
DEFAULT_HYPRL_SOURCE_DIR="./dotfiles/hyprl"
DEFAULT_HYPR_DEST_DIR="$HOME/.config/hypr"
DEFAULT_HYPRL_DEST_DIR="$HOME/.config/hyprl"

# Logging configuration
LOG_LEVEL="INFO"  # DEBUG, INFO, WARN, ERROR
LOG_RETENTION_DAYS=7
MAX_LOG_SIZE_MB=50

# Background job settings
MAX_PARALLEL_JOBS=4
JOB_TIMEOUT_MINUTES=30
JOB_RETRY_COUNT=3

# Package manager settings
PACMAN_OPTIONS="--noconfirm --needed"
YAY_OPTIONS="--noconfirm --needed --sudoloop"
SKIP_CONFIRMATION=false

# Network settings
DNS_SERVERS=("8.8.8.8" "1.1.1.1")
DNS_SAFE_MODE=true  # Don't modify DNS configuration by default
CONNECTION_TIMEOUT=10
DOWNLOAD_TIMEOUT=300

# System requirements
MIN_DISK_SPACE_GB=10
MIN_MEMORY_MB=4096
REQUIRED_COMMANDS=("yay" "git" "mise")

# Dell XPS specific settings
DELL_XPS_BATTERY_THRESHOLD_START=40
DELL_XPS_BATTERY_THRESHOLD_STOP=80
DELL_XPS_ENABLE_TLP=true
DELL_XPS_ENABLE_THERMALD=true

# 1Password settings
ONEPASSWORD_TIMEOUT_SECONDS=30
ONEPASSWORD_MAX_RETRIES=3
ONEPASSWORD_CONFIG_DIR="$HOME/.config/op"

# Development environment settings
ENABLE_DOCKER_ROOTLESS=false
INSTALL_CONTAINER_TOOLS=true
CONFIGURE_GIT_AUTOMATICALLY=true

# Menu settings
MENU_TIMEOUT_SECONDS=0  # 0 = no timeout
MENU_SHOW_DESCRIPTIONS=true
MENU_USE_COLORS=true

# Backup settings
BACKUP_EXISTING_CONFIGS=true
BACKUP_SUFFIX=".backup"
BACKUP_TIMESTAMP_FORMAT="%Y%m%d_%H%M%S"

# Performance settings
ENABLE_PARALLEL_DOWNLOADS=true
ENABLE_BACKGROUND_JOBS=true
OPTIMIZE_FOR_SSD=true

# Security settings
VERIFY_PACKAGE_SIGNATURES=true
CHECK_PACKAGE_INTEGRITY=true
ALLOW_UNTRUSTED_SOURCES=false

# Notification settings
SHOW_DESKTOP_NOTIFICATIONS=true
NOTIFICATION_TIMEOUT=5000
SOUND_ON_COMPLETION=false

# Dotfiles management
DOTFILES_REPO=""
DOTFILES_BRANCH="main"
DOTFILES_USE_HTTPS=true
AGE_KEY_FILE="$HOME/.config/age/key.txt"

# Post-installation actions
RUN_SYSTEM_UPDATE=true
CLEAN_PACKAGE_CACHE=true
OPTIMIZE_BOOT_TIME=true
CONFIGURE_FIREWALL=false

# Error handling
CONTINUE_ON_ERROR=true
SHOW_STACK_TRACES=false
CREATE_ERROR_REPORTS=true

# Feature flags
EXPERIMENTAL_FEATURES=false
ENABLE_TELEMETRY=false

# Input method settings
FIX_CURSOR_INPUT_METHOD=true

# Windows Docker settings
INSTALL_WINDOWS_DOCKER=true
INSTALL_WINAPPS_LAUNCHER=true

# Gnome Keyring settings
SETUP_GNOME_KEYRING=true

# SSH Key Management
SSH_KEYS_BACKUP_EXISTING=true
SSH_KEYS_CREATE_SYMLINKS=true
SSH_KEYS_SETUP_AGENT=true
SSH_KEYS_DEFAULT_TYPE="ed25519"
SSH_KEYS_RSA_BITS=4096
SSH_KEYS_ECDSA_BITS=521
CHECK_FOR_UPDATES=true

# Keyboard Layout Configuration
SETUP_PTBR_KEYBOARD_LAYOUT=true

# UI/UX settings
PROGRESS_BAR_STYLE="modern"  # classic, modern, minimal
COLOR_SCHEME="default"       # default, dark, light
ANIMATION_SPEED="normal"     # slow, normal, fast, off

# Integration settings
INTEGRATE_WITH_SHELL=true
ADD_TO_PATH=true
CREATE_DESKTOP_SHORTCUTS=false
REGISTER_FILE_ASSOCIATIONS=false

# Maintenance settings
AUTO_CLEANUP_LOGS=true
AUTO_CLEANUP_TEMP_FILES=true
SCHEDULE_MAINTENANCE=false

# Cloud integration
SYNC_CONFIGS_TO_CLOUD=false
CLOUD_PROVIDER=""
CLOUD_SYNC_INTERVAL_HOURS=24

# Custom commands (can be overridden in .env)
CUSTOM_PRE_INSTALL_COMMAND=""
CUSTOM_POST_INSTALL_COMMAND=""
CUSTOM_CLEANUP_COMMAND=""

# Hardware detection
AUTO_DETECT_HARDWARE=true
APPLY_HARDWARE_OPTIMIZATIONS=true
WARN_UNSUPPORTED_HARDWARE=true

# Validation settings
VALIDATE_CONFIGS_BEFORE_APPLY=true
DRY_RUN_BY_DEFAULT=false
CONFIRM_DESTRUCTIVE_ACTIONS=true

# Module settings
ENABLE_1PASSWORD_MODULE=true
ENABLE_DEVELOPMENT_MODULE=true
ENABLE_DELL_XPS_MODULE=true
ENABLE_DOTFILES_MODULE=true
ENABLE_DESKTOP_MODULE=true
ENABLE_PIPEWIRE_CAMERA_MODULE=true

# Environment detection
DETECT_OMARCHY=true
DETECT_ARCH=true
DETECT_MANJARO=true
WARN_UNSUPPORTED_DISTRO=true

# Package verification
CHECK_AUR_PACKAGES=true
VERIFY_MAINTAINERS=false
CHECK_PACKAGE_UPDATES=true

# Resource limits
MAX_MEMORY_USAGE_MB=2048
MAX_CPU_USAGE_PERCENT=80
MAX_DISK_USAGE_PERCENT=90

# Compatibility settings
SUPPORT_LEGACY_CONFIGS=true
MIGRATE_OLD_SETTINGS=true
BACKUP_BEFORE_MIGRATION=true

# Debug settings
ENABLE_VERBOSE_LOGGING=false
SAVE_DEBUG_INFO=false
INCLUDE_SYSTEM_INFO=true

# Internationalization
LANGUAGE="en_US"
TIMEZONE_AUTO_DETECT=true
LOCALE_AUTO_CONFIGURE=true

# Function to validate settings
validate_settings() {
  local errors=()
  
  # Check Node.js version format
  if [[ ! "$DEFAULT_NODE_VERSION" =~ ^(lts|[0-9]+)$ ]]; then
    errors+=("Invalid Node.js version format: $DEFAULT_NODE_VERSION")
  fi
  
  # Check .NET version format
  if [[ ! "$DEFAULT_DOTNET_VERSION" =~ ^[0-9]+$ ]]; then
    errors+=("Invalid .NET version format: $DEFAULT_DOTNET_VERSION")
  fi
  
  # Check log level
  if [[ ! "$LOG_LEVEL" =~ ^(DEBUG|INFO|WARN|ERROR)$ ]]; then
    errors+=("Invalid log level: $LOG_LEVEL")
  fi
  
  # Check timeout values
  if [[ "$CONNECTION_TIMEOUT" -le 0 ]]; then
    errors+=("Connection timeout must be positive: $CONNECTION_TIMEOUT")
  fi
  
  # Report errors
  if [[ ${#errors[@]} -gt 0 ]]; then
    for error in "${errors[@]}"; do
      echo "Settings validation error: $error" >&2
    done
    return 1
  fi
  
  return 0
}

# Function to show current settings summary
show_settings_summary() {
  echo
  echo -e "${BOLD}Current Settings Summary${NC}"
  echo "======================="
  
  echo -e "\n${CYAN}Runtimes:${NC}"
  echo "  Node.js: $DEFAULT_NODE_VERSION"
  echo "  .NET: $DEFAULT_DOTNET_VERSION (+ ${EXTRA_DOTNET_VERSIONS[*]})"
  
  echo -e "\n${CYAN}Performance:${NC}"
  echo "  Parallel jobs: $MAX_PARALLEL_JOBS"
  echo "  Job timeout: ${JOB_TIMEOUT_MINUTES}min"
  echo "  Background jobs: $([ "$ENABLE_BACKGROUND_JOBS" = "true" ] && echo "enabled" || echo "disabled")"
  
  echo -e "\n${CYAN}Hardware:${NC}"
  echo "  Auto-detect: $([ "$AUTO_DETECT_HARDWARE" = "true" ] && echo "enabled" || echo "disabled")"
  echo "  Dell XPS optimizations: $([ "$ENABLE_DELL_XPS_MODULE" = "true" ] && echo "available" || echo "disabled")"
  
  echo -e "\n${CYAN}Features:${NC}"
  echo "  1Password integration: $([ "$ENABLE_1PASSWORD_MODULE" = "true" ] && echo "enabled" || echo "disabled")"
  echo "  Development tools: $([ "$ENABLE_DEVELOPMENT_MODULE" = "true" ] && echo "enabled" || echo "disabled")"
  echo "  Dotfiles management: $([ "$ENABLE_DOTFILES_MODULE" = "true" ] && echo "enabled" || echo "disabled")"
  echo "  PipeWire camera support: $([ "$ENABLE_PIPEWIRE_CAMERA_MODULE" = "true" ] && echo "enabled" || echo "disabled")"
  
  echo
}

# Export settings validation function
export -f validate_settings show_settings_summary